{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","loggedInUser","useState","users","setUsers","usersRenderInfo","setUsersRenderInfo","visible","setVisible","maxScore","setMaxScore","levelsArray","setLevelsArray","userScore","setUserScore","medalId","setMedalId","useEffect","getData","then","console","log","setTimeout","usersRenderData","styleSheet","document","styleSheets","data","forEach","element","index","animationName","username","keyframes","score","insertRule","cssRules","length","userData","push","email","a","fetch","json","levelsInfo","levels","i","levelValue","usersData","className","map","e","xmlns","viewBox","id","x1","y1","x2","y2","offset","stopColor","d","stroke","strokeWidth","fill","item","style","animationDuration","animationFillMode","animationTimingFunction","cursor","content","borderRadius","border","height","width","alt","src","image","name","margin","interactive","allowHTML","level","getUserLevelInfo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c32ccf6b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tippy from '@tippyjs/react';\nimport 'tippy.js/dist/tippy.css';\n\n\nfunction App() {\n\n  const medalsInfo = {\n    '1':\"Gold\",\n    '2':\"Silver\",\n    '3':\"Bronze\"\n  }\n\n  const loggedInUser = \"mukul.r@example.com\";\n  const [users, setUsers] = useState(null);\n\n  const [usersRenderInfo, setUsersRenderInfo] = useState(null);\n\n  const [visible, setVisible] = useState(false);\n\n\n  const [maxScore, setMaxScore] = useState(null);\n\n  const [levelsArray,setLevelsArray] = useState([]);\n\n  const [userScore,setUserScore] = useState(null);\n\n  const [medalId,setMedalId] = useState(null);\n\n\n\n  useEffect(() => {\n    getData().then(() => {\n      console.log(\"Data Fetched\");\n    });\n\n    setTimeout(()=>{\n      setVisible(true);\n    },5000);\n\n  }, []);\n\n  useEffect(() => {\n    let usersRenderData = [];\n    if (users && maxScore) {\n      console.log(users);\n      let styleSheet = document.styleSheets[0];\n      let u = users.data;\n      u.forEach((element, index) => {\n        //console.log(element);\n        let animationName = `${element.username}`;\n        let keyframes =\n          `@keyframes ${animationName} {\n          100% {offset-distance:${(element.score / maxScore) * 100}%;\n      }`;\n\n        styleSheet.insertRule(keyframes, styleSheet.cssRules.length);\n       // console.log(styleSheet);\n        element[\"animationName\"] = animationName;\n        let userData = element;\n        usersRenderData.push(userData);\n\n        if(element.email === loggedInUser){\n          console.log('user found')\n          setUserScore(element.score);\n          setMedalId(element.medalId);\n        }\n      });\n      console.log(usersRenderData);\n\n      setUsersRenderInfo(usersRenderData);\n\n\n    }\n    console.log(\"maxScore/users changed\");\n  }, [users,maxScore]);\n\n  const getUserLevelInfo = () => {\n    let level = '';\n    console.log(userScore);\n    if(levelsArray && userScore){\n      levelsArray.forEach((e,i)=>{\n        if(i===0 && userScore <= e){\n          level =  \"Level 1\";\n        }else if(i !== 5 && userScore <= e && userScore > levelsArray[i-1] ){\n          level =  `Level ${i+1}`;\n        }else if( i===5 && userScore > levelsArray[4]){\n          level = \"Level 6\";\n        }\n      })\n    }\n    console.log(level,'level');\n    return level;\n  }\n\n  const getData = async () => {\n    const levelsInfo = await (await fetch('http://localhost:8080/api/get-levels-info')).json();\n    let levels = [];\n    const maxScore = levelsInfo.data[levelsInfo.data.length-1].maxScore;\n    for(let i=1;i<=6;i++){\n      let levelValue = (maxScore/6)*i;\n      levels.push(levelValue);\n    }\n    setMaxScore(levelsInfo.data[levelsInfo.data.length-1].maxScore);\n    const usersData = await (await fetch('http://localhost:8080/api/get-users')).json();\n    setUsers(usersData);\n    setLevelsArray(levels);\n    //console.log(levelsInfo);\n    //console.log(usersData);\n  }\n\n  return (\n    <div className=\"root\">\n\n      <div  className=\"App-header\">\n        GAME&nbsp;&nbsp; SUMMARY\n      </div>\n      <div className=\"main\">\n        <div className=\"leaderboard\">\n          <div className=\"leaderboardMain\">\n\n            {\n              levelsArray.length && levelsArray.map((e,i)=>{\n                let className = `level${i+1}text`;\n                let levelValue = `${e} ft.`\n                return(\n                  <>\n                  <strong key={i*2} className={className}>{levelValue}</strong>\n                  <hr key={\"\"+i+i} className={`level${i+1}`} />\n                  </>\n                )\n              })\n            }\n            {/* <strong className=\"level1text\">3300 ft.</strong>\n            <strong className=\"level2text\">6600 ft.</strong>\n            <strong className=\"level3text\">9900 ft.</strong>\n            <strong className=\"level4text\">13200 ft.</strong>\n            <strong className=\"level5text\">16500 ft.</strong>\n            <strong className=\"level6text\">19800 ft.</strong> */}\n\n            {/* <hr className=\"level1\" />\n            <hr className=\"level2\" />\n            <hr className=\"level3\" />\n            <hr className=\"level4\" />\n            <hr className=\"level5\" />\n            <hr className=\"level6\" /> */}\n\n            <svg className=\"route\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 563\">\n              <defs>\n                <linearGradient id=\"routeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                  <stop offset=\"0%\" stopColor=\"white\" />\n                  <stop offset=\"100%\" stopColor=\"orange\" />\n                </linearGradient>\n              </defs>\n              <path d=\"M 68 516 L 286 490 C 354 410 321 504 490 532 C 608 373 676 569 931 503 C 845 404 900 342 967 333 C 777 195 827 342 612 246 C 810 257 621 164 767 174 L 698 122\" stroke=\"url(#routeGradient)\" strokeWidth=\"3\" fill=\"none\" />\n            </svg>\n            {usersRenderInfo && usersRenderInfo.map((item, index) => {\n\n              let style = {\n                animationName: item.animationName,\n                animationDuration: \"5000ms\",\n                animationFillMode: \"forwards\",\n                animationTimingFunction: \"ease-in-out\",\n                cursor: \"grab\"\n              }\n\n              if (item.email === loggedInUser)\n                return (\n                  <Tippy key={index+index+\"\"} content={<div className=\"userToolTip\"><span><img style={{ borderRadius: \"25px\", border: \"1.7px solid firebrick\" }} height={50} width={50} alt={item.username} src={item.image} /></span><span>{item.name}</span><h5 style={{ margin: 0 }}>Score: {item.score}ft</h5></div>}\n                  interactive={true}\n                  allowHTML={true}\n                  visible={visible}\n                  >\n                    <svg key={\"\" + index} className=\"userPin\" style={style} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                      <path d=\"M 13 10 m 0 -5 c -1.657 0 -3 1.343 -3 3 s 1.343 3 3 3 s 3 -1.343 3 -3 s -1.343 -3 -3 -3 m -7 2.602 c 0 -3.517 3.271 -6.602 7 -6.602 s 7 3.085 7 6.602 c 0 3.455 -2.563 7.543 -7 14.527 c -4.489 -7.073 -7 -11.072 -7 -14.527 m 7 -7.602 c -4.198 0 -8 3.403 -8 7.602 c 0 4.198 3.469 9.21 8 16.398 c 4.531 -7.188 8 -12.2 8 -16.398 c 0 -4.199 -3.801 -7.602 -8 -7.602\" stroke=\"darkred\" strokeWidth=\"0.6\" fill=\"darkred\" />\n                    </svg>\n                  </Tippy>\n\n                )\n              else\n                return (\n                  <Tippy key={index+index+\"\"} content={<div className=\"userToolTip\"><span><img style={{ borderRadius: \"25px\", border: \"1.7px solid firebrick\" }} height={50} width={50} alt={item.username} src={item.image} /></span><span>{item.name}</span><h5 style={{ margin: 0 }}>Score: {item.score}ft</h5></div>}\n                  interactive={true}\n                  allowHTML={true}\n                  >\n                    <svg key={\"\" + index} className=\"userPin\" style={style} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                      <path d=\"M 13 10 m 0 -5 c -1.657 0 -3 1.343 -3 3 s 1.343 3 3 3 s 3 -1.343 3 -3 s -1.343 -3 -3 -3 m -7 2.602 c 0 -3.517 3.271 -6.602 7 -6.602 s 7 3.085 7 6.602 c 0 3.455 -2.563 7.543 -7 14.527 c -4.489 -7.073 -7 -11.072 -7 -14.527 m 7 -7.602 c -4.198 0 -8 3.403 -8 7.602 c 0 4.198 3.469 9.21 8 16.398 c 4.531 -7.188 8 -12.2 8 -16.398 c 0 -4.199 -3.801 -7.602 -8 -7.602\" stroke=\"navajowhite\" strokeWidth=\"0.5\" fill=\"navajowhite\" />\n                    </svg>\n                  </Tippy>\n                )\n\n            })\n\n            }\n\n          </div>\n        </div>\n      </div>\n      <div className=\"summary\">\n            { levelsArray.length && maxScore && userScore && <h4>{getUserLevelInfo()}</h4>}\n            {medalId && <h4>{medalsInfo[medalId]}</h4>}\n            <h4>Rising</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}